package kr.or.ddit.pms.project.controller;

import javax.inject.Inject;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.common.member.vo.MemberPrincipal;
import kr.or.ddit.common.member.vo.MemberVO;
import kr.or.ddit.common.validate.DeleteGroup;
import kr.or.ddit.common.validate.InsertGroup;
import kr.or.ddit.common.validate.UpdateGroup;
import kr.or.ddit.common.vo.PagingVO;
import kr.or.ddit.common.vo.SimpleSearchCondition;
import kr.or.ddit.outsourcing.service.OutProjService;
import kr.or.ddit.outsourcing.vo.OutProjVO;
import kr.or.ddit.pms.project.dao.PMSProjectDAO;
import kr.or.ddit.pms.project.service.PMSProjectService;
import kr.or.ddit.pms.project.vo.PMSProjectVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 작성자명
 * @since 2022. 8. 2.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 8. 2.      홍승조       컨트롤러 생성
 * 2022. 8. 4.      홍승조       insert url 연결
 * 2022. 8. 6.      홍승조       컨트롤러 통합
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Controller
@Slf4j
@RequestMapping("/pmsProject")
public class ProjectController {
	@Inject
	PMSProjectDAO PMSProjectDAO;
	
	@Inject
	PMSProjectService service;
	
	@Inject
	OutProjService outProjService;
	
	@ModelAttribute("simpleCondition")
	public SimpleSearchCondition simpleCondition() {
		return new SimpleSearchCondition();
	}
	
	@ModelAttribute("PMSProject")
	public PMSProjectVO PMSProject() {
		return new PMSProjectVO();
	}
	
	@GetMapping("form")
	public String pmsProjectForm() {
		return "pms/pmsProject/pmsProjectForm";
	}
	
	@PostMapping
	public String pmsProjectInsert(
		@Validated(InsertGroup.class)@ModelAttribute("PMSProject") PMSProjectVO PMSProject
		, Errors errors
		) {
		String viewName = null;
		if (!errors.hasErrors()) {
			service.createPMSProject(PMSProject);
			viewName = "redirect:/pmsProject";
		} else {
			log.info("에러"+errors);
			viewName = "pms/pmsProject/pmsProjectForm";
		}
		return viewName;
	}

	@GetMapping("{projId}/form")
	public String pmsProjectEdit(
		@PathVariable String projId
		, Authentication authentication
		, Model model
		) {
		MemberPrincipal userPrincipal = (MemberPrincipal) authentication.getPrincipal();
		MemberVO member = userPrincipal.getRealMember();
		
		PMSProjectVO PMSProject = service.retrievePMSProject(projId);
		model.addAttribute("PMSProject", PMSProject);
		
		model.addAttribute("member", member);
		
		return "pms/pmsProject/pmsProjectEdit";
	}
	
	@PutMapping("{projId}/form")
	public String pmsProjectUpdate(
		@Validated(UpdateGroup.class)@ModelAttribute("PMSProject") PMSProjectVO PMSProject
		, Errors errors
		, RedirectAttributes redirectAttributes
		, SessionStatus sessionStatus
		) {
		
		String viewName = null;
		log.info(""+errors);
		log.info("==================================================="+PMSProject.getProjState());
		if (!errors.hasErrors()) {
			service.modifyPMSProject(PMSProject);
			viewName = "redirect:/pmsProject/{projId}";
			sessionStatus.setComplete();
			log.info("성공했습니다~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		} else {
			String errorAttrName = BindingResult.MODEL_KEY_PREFIX+"PMSProject";
			redirectAttributes.addFlashAttribute(errorAttrName, errors);
			viewName = "redirect:/pmsProject/{projId}/form";
			log.info("실패했습니다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		}
		return viewName;
	}
	
	@DeleteMapping("{projId}")
	public String pmsProjectDelete(
		@Validated(DeleteGroup.class) PMSProjectVO PMSProject
		, Errors errors
		, RedirectAttributes redirectAttributes
		) {
		
		log.info(PMSProject.getProjPass());
		
		String viewName = null;
		if (!errors.hasErrors()) {
			service.deletePMSProject(PMSProject);
			redirectAttributes.addFlashAttribute("message", String.format("%s 프로젝트 삭제", PMSProject.getProjId()));
			viewName = "redirect:/pmsProject/";
		} else {
			redirectAttributes.addFlashAttribute("message", "비밀번호 누락");
			
			viewName = "redirect:/pmsProject{projId}";

		}
		return viewName;
	}
	
	@GetMapping
	public String pmsProjectList(
		@RequestParam(name="page", required=false, defaultValue="1")int currentPage	
		, @RequestParam(value="searchType", required=false)String searchType
		, @RequestParam(value="searchWord", required=false)String searchWord
		, @ModelAttribute("simpleCondition") SimpleSearchCondition simpleCondition
		,Model model
		, @ModelAttribute("PMSProject") PMSProjectVO PMSProject
		) {
		PagingVO<PMSProjectVO> pagingVO = new PagingVO<>(7, 5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(simpleCondition);
		service.retrievePMSProjectList(pagingVO);
		
		log.info("아웃소싱프로젝트가 안나와요~~~~{}", pagingVO);
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("PMSProject", PMSProject);
		
		
		return "pms/pmsProject/pmsProjectList";
	}
	
	@GetMapping("{projId}")
	public String pmsProjectView(
		@PathVariable String projId
		, @ModelAttribute("PMSProject") PMSProjectVO PMSProject
		, Model model
		) {
		log.info("============================================="+projId);
		PMSProject = service.retrievePMSProject(projId);
		model.addAttribute("PMSProject", PMSProject);
		return "pms/pmsProject/pmsProjectView";
	}
	
	
	@GetMapping("info/{projId}")
	public String pmsPmsProjectInfo(
		@PathVariable String projId	
		, @ModelAttribute("PMSProjectVO") PMSProjectVO PMSProject
		, Model model
		, Authentication authentication
		) {
		
		MemberPrincipal userPrincipal = (MemberPrincipal) authentication.getPrincipal();
		MemberVO member = userPrincipal.getRealMember();
		
		log.info("getMemType : " + member.getMemType().get(0));
		
		String role = member.getMemType().get(0);
		
		PMSProject = service.retrievePMSProject(projId);
		model.addAttribute("PMSProject", PMSProject);
		model.addAttribute("role", role);
		
		
		return "pms/pmsProject/pmsProjectInfo";
	}
	
	@GetMapping("creaed")
	public String pmsCreatedProjectList(
			@RequestParam(name="page", required=false, defaultValue="1")int currentPage	
			, @RequestParam(value="searchType", required=false)String searchType
			, @RequestParam(value="searchWord", required=false)String searchWord
			, @ModelAttribute("simpleCondition") SimpleSearchCondition simpleCondition
			, Authentication authentication
			,Model model
			) {
		PagingVO<PMSProjectVO> pagingVO = new PagingVO<>(7, 5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(simpleCondition);
		
		String projArchi = authentication.getName();
		
		log.info("**********************************************************************"+projArchi);
		
		service.createdPMSProject(pagingVO, projArchi);
		log.info(pagingVO.getDataList()+"");
		
		model.addAttribute("pagingVO", pagingVO);
		return "pms/pmsProject/createdProject";
		
	}
	
	@GetMapping("joinProject")
	public String pmsProjectJoinList(
			@RequestParam(name="page", required=false, defaultValue="1")int currentPage	
			, @RequestParam(value="searchType", required=false)String searchType
			, @RequestParam(value="searchWord", required=false)String searchWord
			, @ModelAttribute("simpleCondition") SimpleSearchCondition simpleCondition
			,Model model
			, Authentication authentication
			) {
		PagingVO<PMSProjectVO> pagingVO = new PagingVO<>(7, 5);
		PMSProjectVO project = new PMSProjectVO();

		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(simpleCondition);
		
		String id = authentication.getName();
		
		project.setProjArchi(id);
		pagingVO.setDetailCondition(project);

		service.joinPMSProjectList(pagingVO, id);
		
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "pms/pmsProject/joinPmsProject";
	}
	
	
	@PostMapping("join")
	public String pmsProjectJoin(
//		@PathVariable("projId")String projId
		 @ModelAttribute("PMSProject") PMSProjectVO PMSProject
		, Authentication authentication
		, RedirectAttributes redirectAttributes
		) {
		log.info("여기는 컨트롤러ㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓㅓ");
		
		String id = authentication.getName();
		
		log.info("프로젝트 참가할 때 받은 키값~~~{}",PMSProject.getProjKey());
		log.info("프로젝트 참가할 때 받은 아이디 값~~~{}",PMSProject.getProjId());
//		입력받은 프로젝트 키 받기
		
//		입력받은 프로젝트 키 비교
		ServiceResult result = service.joinPMSProject(PMSProject, id);
//			맞으면 프로젝트 참가
//			틀리면 돌아가기
		String message = null;
		switch (result) {
		case FAIL:
			message = "participated";
			break;
		case INVALIDPASSWORD:
			message = "invalidpassword";
			break;
		default:
			message = "ok";
			break;
		}
		
		redirectAttributes.addFlashAttribute("message", message);
		
		return "redirect:/pmsProject";
	}
	
	
	@GetMapping("{outProjId}/autojoin")
	public String autoPmsProjectJoin(
		@PathVariable("outProjId")String outProjId
		, Model model
		, Authentication authentication
		, @RequestParam("projPass")String projPass
		) {
		
		log.info("비밀번호 확인해보자~~~{}", projPass);
		// 아웃소싱 프로젝트 정보 변경
		OutProjVO outProj = new OutProjVO();
		outProj.setProjId(outProjId);

		outProjService.progress(outProj);
		
		String viewName = null;
		String comId = authentication.getName();
		if (projPass != "" && projPass != null) {
			//	프로젝트 자동생성
			PMSProjectVO PMSProject = new PMSProjectVO();
			PMSProject.setProjOutproj(outProjId);
			ServiceResult result = service.autoJoinPMSProject(PMSProject, comId, projPass);
			
			
			if (result == ServiceResult.OK) {
				viewName = "redirect:/pmsProject/creaed";
			} else {
				viewName = "redirect:/myinfo/contract/project";
			}
		}else {
			viewName = "redirect:/myinfo/project";
		}
			return viewName;
		}
	
	
	
	
}
