package kr.or.ddit.pms.report.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.validate.DeleteGroup;
import kr.or.ddit.common.validate.InsertGroup;
import kr.or.ddit.common.validate.UpdateGroup;
import kr.or.ddit.common.vo.PagingVO;
import kr.or.ddit.common.vo.SimpleSearchCondition;
import kr.or.ddit.pms.report.dao.ReportDAO;
import kr.or.ddit.pms.report.service.reportService;
import kr.or.ddit.pms.report.vo.ReportVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 작성자명
 * @since 2022. 8. 1.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 8. 1.      홍승조       jsp 연결
 * 2022. 8. 4.      홍승조       insert url 연결
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("pms/{projId}/report")
public class ReportController {
	
	@Inject
	ReportDAO reportDAO;
	
	@Inject
	reportService service;
	
	
	@GetMapping("form")
	public String reportForm(
		@PathVariable String projId
		, @ModelAttribute("report") ReportVO report
		, Model model
		) {
		model.addAttribute("projId", projId);
		model.addAttribute("report", report);
		
		return "pms/report/reportForm";
	}
	
	@PostMapping
	public String reportInsert(
		@Validated(InsertGroup.class)@ModelAttribute("report") ReportVO report
		, Errors errors
		) {
		String viewName = null;
		
		if (!errors.hasErrors()) {
			service.createReport(report);
			viewName = "redirect:/pms/{projId}/report";
		} else {
			log.info("보고서 정보 입력폼에서 에러발생" + errors);
			viewName = "redirect:/pms/{projId}/report/form";
		}
		return viewName;
	}
	

	@GetMapping("{reportId}/form")
	public String reportEdit(
		@PathVariable String reportId
//		, @PathVariable String ProjId
		, @ModelAttribute("report") ReportVO report
		, Model model
		) {
		report = service.retrieveReport(reportId);
		log.info("보고서 첨부파일 리스트 확인{}", report.getAttatchList());
		
		model.addAttribute("report", report);
		
		return "pms/report/reportEdit";
	}
	
	
	
	@PostMapping("{reportId}")
	public String reportUpdate(
		@Validated(UpdateGroup.class)@ModelAttribute("report")ReportVO report
		, Errors errors
		, RedirectAttributes redirectAttributes
		, SessionStatus sessionStatus
		) {
		String viewName = null;
		
		if (!errors.hasErrors()) {
			service.modifyReport(report);
			viewName = "redirect:/pms/{projId}/report/{reportId}";
		} else {
			String errorAttName = BindingResult.MODEL_KEY_PREFIX+"report";
			viewName = "pms/report/reportEdit";
		}
		return viewName;
	}
	
	
	@DeleteMapping("{reportId}")
	public String reportDelete(
		@Validated(DeleteGroup.class)ReportVO report
		, Errors errors
		, RedirectAttributes redirectAttributes
		) {
		
		String viewName = null;
		
		if (!errors.hasErrors()) {
			service.deleteReport(report);
			redirectAttributes.addFlashAttribute("message", String.format("%s 보고서 삭제", report.getReportTitle()));
			viewName = "redirect:/pms/{projId}/report";
		} else {
			redirectAttributes.addFlashAttribute("message", "삭제 실패");
			viewName = "redirect:/pms/{projId}/report/{reportId}";
		}
		
		
		return viewName;
	}

	
	
	@GetMapping
	public String reportList(
		@RequestParam(name="page", required=false, defaultValue="1")int currentPage	
		, @RequestParam(value="searchType", required=false)String searchType
		, @RequestParam(value="searchWord", required=false)String searchWord
		, @ModelAttribute("simpleCondition") SimpleSearchCondition simpleCondition
		, Model model
		, @ModelAttribute("report")ReportVO report
		, @PathVariable String projId
		) {
		
		PagingVO<ReportVO> pagingVO = new PagingVO<>(7,5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(simpleCondition);
		
		report.setReportProj(projId);
		
		pagingVO.setDetailCondition(report);
		
		service.reteiveReportList(pagingVO);
		
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "pms/report/reportList";
	}
	
	
	
	
	
	@GetMapping("{reportId}")
	public String reportView(
		@PathVariable String reportId
		, @PathVariable String projId
		, @ModelAttribute("report") ReportVO report
		, Model model
		) {
		
		report.setReportProj(projId);
		
		report = service.retrieveReport(reportId);
		
		model.addAttribute("report", report);
		return "pms/report/reportView";
	}

		
}
