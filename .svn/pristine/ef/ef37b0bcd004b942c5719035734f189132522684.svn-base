<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.outsourcing.dao.OutProjDAO">

<sql id="outProj"><!-- 아직 등록자, 제목, 고용형태 만 등록했음-->
	<where>
		PROJ_APPROVE = 1 
		AND PROJ_STATE != 'DELETE'
		<if test="simpleCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
			<choose>
				<when test="simpleCondition.searchType eq 'projRegist'">
					AND INSTR(PROJ_REGIST, #{simpleCondition.searchWord}) > 0
				</when>
				<when test="simpleCondition.searchType eq 'projTitle'">
					AND INSTR(PROJ_TITLE, #{simpleCondition.searchWord}) > 0
				</when>
				<when test="simpleCondition.searchType eq 'projEmptype'">
					AND PROJ_EMPTYPE = #{simpleCondition.searchWord}
				</when>
				<otherwise>
					  AND INSTR(PROJ_REGIST, #{simpleCondition.searchWord}) > 0
					OR INSTR(PROJ_TITLE, #{simpleCondition.searchWord}) > 0
					OR PROJ_EMPTYPE = #{simpleCondition.searchWord}
				</otherwise>
			</choose>
		</if>
	</where>
</sql>


<select id="selctOutProjCount" resultType="int">
	select COUNT(*)
	from OUTSOURCING_PROJ
	<include refid="outProj" />
</select>


<insert id="insertOutProj" parameterType="kr.or.ddit.outsourcing.vo.OutProjVO" >
		<selectKey resultType="String" keyProperty="projId" order="BEFORE">
			 SELECT 'OUT' || TO_CHAR(SYSDATE, 'yymmdd') || LPAD(COUNT(*) + 1, 4, '0') PROJ_ID
		     FROM OUTSOURCING_PROJ
		     WHERE SUBSTR(PROJ_ID, 4, 6) = TO_CHAR(SYSDATE, 'yymmdd')
		</selectKey>
	INSERT INTO OUTSOURCING_PROJ (
		PROJ_ID,
		PROJ_REGIST,
		PROJ_TITLE,
		PROJ_EMPTYPE,
		PROJ_TYPE,
		PROJ_RECRUITSDATE,
		PROJ_RECRUITFDATE,
		PROJ_PLANSTATE,
		PROJ_MEMNUM,
		PROJ_SDATE,
		PROJ_FDATE,
		PROJ_ESTIMATE,
		PROJ_CONTENT,
		PROJ_QUALIFI,
		PROJ_LOC
	) VALUES(
		#{projId},
		#{projRegist},
		#{projTitle},
		#{projEmptype},
		#{projType},
		SYSDATE,
		TO_DATE(#{projRecruitfdate},'YYYY-MM-DD'),
		#{projPlanstate},
		#{projMemnum},
		TO_DATE(#{projSdate},'YYYY-MM-DD'),
		TO_DATE(#{projFdate},'YYYY-MM-DD'),
		#{projEstimate},
		#{projContent},
		#{projQualifi},
		#{projLoc}
	)
	
</insert>


<select id="selectOutProjList" parameterType="kr.or.ddit.common.vo.PagingVO" resultType="kr.or.ddit.outsourcing.vo.OutProjVO">
		SELECT B.*
			FROM(
				SELECT ROWNUM RNUM, A.*
					FROM (
						SELECT 
							PROJ_ID, PROJ_REGIST, PROJ_EMPTYPE, PROJ_TYPE, PROJ_RECRUITFDATE,
							PROJ_PLANSTATE, PROJ_MEMNUM, TO_CHAR(PROJ_SDATE, 'YYYY-MM-DD') PROJ_SDATE, TO_CHAR(PROJ_FDATE, 'YYYY-MM-DD') PROJ_FDATE, PROJ_ESTIMATE,
							PROJ_CONTENT, PROJ_QUALIFI, PROJ_APPROVE, PROJ_REJECT, PROJ_RATING,
							TO_CHAR(PROJ_REALSDATE, 'YYYY-MM-DD') PROJ_REALSDATE, TO_CHAR(PROJ_REALFDATE, 'YYYY-MM-DD') PROJ_REALFDATE, PROJ_LOC, PROJ_STATE,
							TO_CHAR(PROJ_RECRUITSDATE, 'YYYY-MM-DD') PROJ_RECRUITSDATE, PROJ_TITLE
						FROM
						    OUTSOURCING_PROJ
						   
						<include refid="outProj" />
						ORDER BY PROJ_ID DESC
				) A
			) B
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
</select>

<resultMap type="kr.or.ddit.outsourcing.vo.OutProjVO" id="outMap" autoMapping="true">
	<id property="projId" column="PROJ_ID"/>
	<collection property="comMemList" ofType="kr.or.ddit.common.member.vo.ComMemberVO" autoMapping="true">
		<id property="comId" column="COM_ID"/>
	</collection>
</resultMap>

<select id="selectOutProj" parameterType="string" resultMap="outMap">
	SELECT 
	    COM.COM_NAME,COM.COM_HP, COM.COM_COMNAME,COM.COM_MAIL,
		OUT.PROJ_ID, OUT.PROJ_REGIST, OUT.PROJ_EMPTYPE, OUT.PROJ_TYPE, TO_CHAR(OUT.PROJ_RECRUITFDATE, 'YYYY-MM-DD') PROJ_RECRUITFDATE,
		OUT.PROJ_PLANSTATE, OUT.PROJ_MEMNUM, TO_CHAR(OUT.PROJ_SDATE, 'YYYY-MM-DD') PROJ_SDATE, TO_CHAR(OUT.PROJ_FDATE, 'YYYY-MM-DD') PROJ_FDATE, PROJ_ESTIMATE,
		OUT.PROJ_CONTENT, OUT.PROJ_QUALIFI, OUT.PROJ_APPROVE, OUT.PROJ_REJECT, OUT.PROJ_RATING,
		TO_CHAR(OUT.PROJ_REALSDATE, 'YYYY-MM-DD') PROJ_REALSDATE, TO_CHAR(OUT.PROJ_REALFDATE, 'YYYY-MM-DD') PROJ_REALFDATE, OUT.PROJ_LOC, OUT.PROJ_STATE,
		TO_CHAR(OUT.PROJ_RECRUITSDATE, 'YYYY-MM-DD') PROJ_RECRUITSDATE, OUT.PROJ_TITLE
	FROM
		OUTSOURCING_PROJ OUT LEFT OUTER JOIN COM_MEMBER COM ON (OUT.PROJ_REGIST = COM.COM_ID)
	WHERE OUT.PROJ_ID = #{projId}
</select>

<update id="updateOutProj" parameterType="kr.or.ddit.outsourcing.vo.OutProjVO">
	UPDATE OUTSOURCING_PROJ
	SET PROJ_TITLE = #{projTitle,jdbcType=VARCHAR},
		PROJ_CONTENT=#{projContent,jdbcType=CLOB},
		PROJ_ESTIMATE=#{projEstimate,jdbcType=NUMERIC},
		PROJ_EMPTYPE=#{projEmptype,jdbcType=VARCHAR},
		PROJ_MEMNUM=#{projMemnum,jdbcType=NUMERIC},
		PROJ_SDATE=#{projSdate,jdbcType=DATE},
		PROJ_FDATE=#{projFdate,jdbcType=DATE},
		PROJ_LOC=#{projLoc,jdbcType=VARCHAR}
	WHERE PROJ_ID = #{projId}	

</update>

<select id="createdProjectList" parameterType="kr.or.ddit.outsourcing.vo.OutProjVO" resultType="kr.or.ddit.outsourcing.vo.OutProjVO">
	SELECT 
		PROJ_ID, PROJ_REGIST, PROJ_EMPTYPE, PROJ_TYPE, PROJ_RECRUITFDATE,
		PROJ_PLANSTATE, PROJ_MEMNUM, TO_CHAR(PROJ_SDATE, 'YYYY-MM-DD') PROJ_SDATE, TO_CHAR(PROJ_FDATE, 'YYYY-MM-DD') PROJ_FDATE, PROJ_ESTIMATE,
		PROJ_CONTENT, PROJ_QUALIFI, PROJ_APPROVE, PROJ_REJECT, PROJ_RATING,
		TO_CHAR(PROJ_REALSDATE, 'YYYY-MM-DD') PROJ_REALSDATE, TO_CHAR(PROJ_REALFDATE, 'YYYY-MM-DD') PROJ_REALFDATE, PROJ_LOC, PROJ_STATE,
		TO_CHAR(PROJ_RECRUITSDATE, 'YYYY-MM-DD') PROJ_RECRUITSDATE, PROJ_TITLE
	FROM
	    OUTSOURCING_PROJ
	WHERE PROJ_REGIST=#{projRegist}   
	AND PROJ_APPROVE = 1 
	AND PROJ_STATE != 'DELETE'
</select>

<update id="deleteOutProj" parameterType="String">
	UPDATE OUTSOURCING_PROJ SET PROJ_STATE = 'DELETE'
	WHERE PROJ_ID=#{projId}
</update>



<!-- 직무분야, 기술 관련 -->
<insert id="objList" parameterType="kr.or.ddit.outsourcing.vo.OutProjVO">
	INSERT ALL
	<foreach collection="objList" item="obj">
	INTO PROJECT_OBJ(
		PROJ_OBJ,
		PROJ_ID
	) VALUES (
		#{obj.projObj}	
		, #{projId}
	)
	</foreach>
	SELECT * FROM DUAL
</insert>


<insert id="skillList" parameterType="kr.or.ddit.outsourcing.vo.OutProjVO">
	INSERT ALL
	<foreach collection="skillList" item="skill">
	INTO PROJECT_SKILL(
		PROJ_SKILL,
		PROJ_ID
	) VALUES (
		#{skill.projSkill}
		,#{projId}
	)
	</foreach>
	SELECT * FROM DUAL
</insert>



<!-- work.xml 에 insertWorkAttatch 참고해서 해라 -->










<!-- 공통 코드 관련 -->
<select id="selectObjList" resultType="kr.or.ddit.common.vo.CommomCodeVO">
	SELECT CODE_ID, CODE_NAME
		FROM COMMON_CODE
		WHERE TYPE_ID = 'JOBFEILD'
</select>

<select id="selectSkillList" resultType="kr.or.ddit.common.vo.CommomCodeVO">
	SELECT CODE_ID, CODE_NAME
		FROM COMMON_CODE
		WHERE TYPE_ID = 'SKILL'
</select>










</mapper>









