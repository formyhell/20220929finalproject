package kr.or.ddit.pms.issue.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.qna.vo.QnaVO;
import kr.or.ddit.common.validate.DeleteGroup;
import kr.or.ddit.common.validate.InsertGroup;
import kr.or.ddit.common.validate.UpdateGroup;
import kr.or.ddit.common.vo.PagingVO;
import kr.or.ddit.common.vo.SimpleSearchCondition;
import kr.or.ddit.pms.issue.dao.IssueDAO;
import kr.or.ddit.pms.issue.service.IssueService;
import kr.or.ddit.pms.issue.vo.IssueSolveVO;
import kr.or.ddit.pms.issue.vo.IssueVO;
import kr.or.ddit.pms.project.dao.PMSProjectDAO;
import kr.or.ddit.pms.project.vo.PMSProjectVO;
import kr.or.ddit.pms.project.vo.projInvolveVO;
import kr.or.ddit.pms.work.vo.WorkVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 작성자명
 * @since 2022. 8. 1.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 8. 1.      홍승조       jsp 연결
 * 2022. 8. 4.      홍승조       insert url 연결
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/pms")
public class IssueController {
	
	@Inject
	IssueService service;
	
	@Inject
	PMSProjectDAO pmsDAO;
	@Inject
	IssueDAO issueDAO;
	
	@ModelAttribute("simpleCondition")
	public SimpleSearchCondition simpleCondition() {
		return new SimpleSearchCondition();
	}
	
	@ModelAttribute("typeList")
	public List<Map<String, Object>> typeList() {
		return issueDAO.selectIssueTypeList();
	}
	@ModelAttribute("importList")
	public List<Map<String, Object>> importList() {
		return issueDAO.selectIssueImportList();
	}
	@ModelAttribute("issue")
	public IssueVO issue() {
		return new IssueVO();
	}
	@ModelAttribute("solve")
	public IssueSolveVO solve() {
		return new IssueSolveVO();
	}
	
	// 이슈 리스트
	@GetMapping("{projId}/issue")
	public String issueList(
		@PathVariable String projId
		, @RequestParam(name="page", required=false, defaultValue="1")int currentPage	
		, @RequestParam(value="searchType", required=false)String searchType
		, @RequestParam(value="searchWord", required=false)String searchWord
		, @ModelAttribute("simpleCondition") SimpleSearchCondition simpleCondition
		,Model model
		) {
		PagingVO<IssueVO> pagingVO = new PagingVO<>(7, 5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(simpleCondition);
		
		Map<String, Object> map = new HashMap<>();
		map.put("pagingVO", pagingVO);
		map.put("projId", projId);
		
		service.retrieveIssueList(map);
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("projId", projId);
		
		return "pms/issue/issueList";
	}
	
	// 이슈 뷰
	@GetMapping("{projId}/issue/{issueId}")
	public String issueView(
		@PathVariable String projId
		, @PathVariable String issueId
		, Model model
	) {
		IssueVO issue = service.retrieveIssue(issueId);
		if(issue.getIssueState().equals("RESOLVED")) {
			IssueSolveVO solve = service.retrieveIssueSolve(issueId);
			model.addAttribute("solve",solve);
		}
		model.addAttribute("issue",issue);
		model.addAttribute("projId",projId);
		return "pms/issue/issueView";
		
	}
	
	// 입력 폼
	@GetMapping("{projId}/issue/form")
	public String issueForm(
		@PathVariable String projId
		, Model model
	) {
		// 일감, 참가자 목록
		List<WorkVO> workList = service.retrieveWorkList(projId);
		List<projInvolveVO> involveList = service.retrieveProjInvolveList(projId);
		PMSProjectVO pmsProject = pmsDAO.selectPMSProject(projId);
		model.addAttribute("projId",projId);
		model.addAttribute("workList",workList);
		model.addAttribute("involveList",involveList);
		model.addAttribute("pmsProject",pmsProject);
		return "pms/issue/issueForm";
	}
	
	@PostMapping(value="issue/selectWork", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public Map<String, Object> selectWorkNames(
			String workManager, String workCharger
	) { 
		Map<String, Object> map = new HashMap<>();
		map.put("workManager", workManager);
		map.put("workCharger", workCharger);
		Map<String, Object> workName = issueDAO.selectWorkName(map);
		return workName;
	}
	
	// 입력 값 저장
	@PostMapping("{projId}/issue/form")
	public String issueInsert(
		@PathVariable String projId
		, @Validated(InsertGroup.class) @ModelAttribute("issue") IssueVO issue
		, Errors errors
	) {
		log.info("issue: {}", issue);
		boolean vaild =  !errors.hasErrors();
		String viewName = null;
		if(vaild){
			service.createIssue(issue);
			viewName = "redirect:/pms/{projId}/issue";
		}else {
			viewName = "pms/issue/issueForm";
		}
		return viewName;
	}

	// 수정 폼
	@GetMapping("{projId}/issue/{issueId}/form")
	public String issueEdit(
		@PathVariable String projId
		, @PathVariable String issueId
		, Model model
	) {
		IssueVO issue = service.retrieveIssue(issueId);
		model.addAttribute("issue",issue);
		model.addAttribute("projId",projId);
		
		// 일감, 참가자 목록
		List<WorkVO> workList = service.retrieveWorkList(projId);
		List<projInvolveVO> involveList = service.retrieveProjInvolveList(projId);
		PMSProjectVO pmsProject = pmsDAO.selectPMSProject(projId);
		model.addAttribute("workList",workList);
		model.addAttribute("involveList",involveList);
		model.addAttribute("pmsProject",pmsProject);
		
		
		return "pms/issue/issueEdit";
	}
	
	// 수정 값 저장
	@PostMapping("{projId}/issue/{issueId}")
	public String issueUpdate(
		@PathVariable String projId
		, @PathVariable String issueId
		, @Validated(UpdateGroup.class) @ModelAttribute("issue") IssueVO issue
		, Errors errors
	) {
		log.info("수정값 저장으로 이동하자");
		log.info("issue : {}", issue);
		String viewName = null;
		if (!errors.hasErrors()) {
			service.modifyIssue(issue);
			viewName = "redirect:/pms/{projId}/issue/{issueId}";
			log.info("성공?");
		} else {
			viewName = "pms/issue/issueEdit";
			log.info("실패?");
		}
		return viewName;
	}
	
	// 삭제
	@DeleteMapping("{projId}/issue/{issueId}")
	public String issueDelete(
		@Validated(DeleteGroup.class) @ModelAttribute("issue") IssueVO issue
		, Errors errors
		, @PathVariable String projId
		, @PathVariable String issueId
	) {
		log.info("*************삭제컨트틀러**************************");
		String viewName = null;
		if(!errors.hasErrors()) {
			service.removeIssue(issueId);
			viewName = "redirect:/pms/{projId}/issue";
		} else {
			viewName = "redirect:/pms/{projId}/issue/{issueId}";
		}
		
		return viewName;
	}
	
	// 해결 값 저장
	@PostMapping("{projId}/issue/{issueId}/solve")
	public String issueSolve(
		@PathVariable String projId
		, @PathVariable String issueId
		, @Validated(InsertGroup.class) @ModelAttribute("solve") IssueSolveVO solve
		, Errors errors
	) {
		log.info("*************해결해결**************************");
		log.info("solve : {}", solve);
		log.info("solve : {}", solve.getSolveContent());
		String viewName = null;
		if (!errors.hasErrors()) {
			service.createIssueSolve(solve);
			viewName = "redirect:/pms/{projId}/issue";
			log.info("성공?");
		} else {
			viewName = "redirect:/pms/{projId}/issue/{issueId}";
			log.info("실패?");
		}
		return viewName;
	}

	
	
}
