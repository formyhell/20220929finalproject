package kr.or.ddit.outsourcing.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.outsourcing.service.ApplyProjService;
import kr.or.ddit.outsourcing.service.OutProjService;
import kr.or.ddit.outsourcing.vo.ApplicantVO;
import kr.or.ddit.outsourcing.vo.OutProjVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 조채원
 * @since 2022. 8. 24.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                   수정자              		 수정내용
 * --------     --------    ----------------------
 * 2022. 8. 24.   조채원       			최초작성
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/outsourcing/apply")
public class ApplyController {
	@Inject
	ApplyProjService service;
	
	@Inject
	OutProjService outProjService;
	
	@RequestMapping("{projId}")
	public String processHTML(@PathVariable String projId, Model model) {
		model.addAttribute("projId", projId);
		return "outsourcing/applicant";
	}
	
	@GetMapping(value = "{projId}", produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public List<ApplicantVO> getMapping(@PathVariable String projId) {
		List<ApplicantVO> applyList = service.getAll(projId);
		return applyList;
	}
	
	@PostMapping()
	public String getContractForm(@ModelAttribute ApplicantVO apply, RedirectAttributes redirectAttributes) {
		redirectAttributes.addAttribute("applyId", apply.getApplyId());
		return "redirect:/outsourcing/contract/form";
	}
	
	@GetMapping("support/form/{projId}")
	public String supportProjectForm(
		@ModelAttribute("applyProj")ApplicantVO applyProj
		, @PathVariable String projId 
		, Model model
		) {
		OutProjVO outProj = outProjService.findByPK(projId);
		log.info("프로젝트 지원할 때 보여줄 프로젝트 이름 : {}",outProj.getProjTitle());
		String projName = outProj.getProjTitle();
		
		
		applyProj = service.getprojectObj(projId);
		
		model.addAttribute("projId", projId);
		model.addAttribute("projName", projName);
		model.addAttribute("applyProj", applyProj);
		
		return "outsourcing/supportProject";
	}
	
	@PostMapping("support")
	public String supportProject(
	@ModelAttribute("applyProj")ApplicantVO applyProj
	, RedirectAttributes redirectAttributes
	) {
		ServiceResult result = service.supprotProject(applyProj);
		
		String message = null;
		
		if (result == ServiceResult.DUPLICATED) {
			message = "duplicated";
		} else {
			message = "ok";
		}
		
		redirectAttributes.addFlashAttribute("message", message);
		
		return "redirect:/outsourcing";
	}
	
}
