package kr.or.ddit.common.member.vo;

import java.io.Serializable;
import java.util.List;
import java.util.UUID;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.groups.Default;

import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.common.validate.DeleteGroup;
import kr.or.ddit.common.validate.InsertGroup;
import kr.or.ddit.common.validate.UpdateGroup;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;

/**
 * @author 김유진
 * @since 2022. 8. 8.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                 수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 8. 8.       김유진              최초작성
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@EqualsAndHashCode(of="comId")
@ToString(exclude="comPass")
@NoArgsConstructor //기본 생성자 생성
@AllArgsConstructor(access=AccessLevel.PRIVATE)
@Data
public class ComMemberVO extends MemberVO implements Serializable{
	
	
	@NotBlank(groups= {Default.class, DeleteGroup.class})
	@Pattern(regexp = "^[A-Za-z0-9]{2,20}$", message = "아이디는 영문과 숫자를 사용하세요.")
	private String comId;
	@NotBlank(groups= {Default.class, DeleteGroup.class}) 
	@Pattern(regexp = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[`~!@#$%^&*()-_=+])[A-Za-z\\d`~!@#$%^&*()-_=+]{8,16}$", message = "비밀번호는 8~16자로 영문, 숫자, 특수문자를 사용하세요.")
	private String comPass;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp = "^[ㄱ-ㅎ가-힣a-zA-z0-9-_]{2,10}$", message = "닉네임은 특수문자를 제외한 2~10자리여야 합니다.")
	private String comNick;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	private String comName;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp="\\d{3}-\\d{3,4}-\\d{4}", message = "휴대폰 형식이 올바르지 않습니다. (010-0000-0000)")
	private String comHp;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	private String comComname;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp = "^(?:\\w+\\.?)*\\w+@(?:\\w+\\.)+\\w+$", message = "이메일 형식이 올바르지 않습니다.")
	private String comMail;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp="\\d{2,3}-\\d{3,4}-\\d{4}", message = "휴대폰 형식이 올바르지 않습니다. (042-0000-0000)")
	private String comComtel;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	private String comComceo;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp="^[0-9]*$", message = "사업자등록번호는 숫자만 사용하세요.")
	private String comCbr;
	@NotBlank (groups= {InsertGroup.class, UpdateGroup.class})
	@Pattern(regexp="\\d{4}-\\d{2}-\\d{2}", message = "날짜 형식이 올바르지 않습니다.")
	private String comOpendate;
	private Integer comDelete;
	private Integer comRating;
	private Integer enabled;
	private String comGrd;
	private List<String> memProj;

	//회원 프로필 이미지
		private String comImg;
		private MultipartFile comImage;
		public void setComImage(MultipartFile comImage) {
			if(comImage!=null && !comImage.isEmpty() && comImage.getContentType().startsWith("image/"))
			this.comImage = comImage;
			this.comImg = UUID.randomUUID().toString();
		}
}
